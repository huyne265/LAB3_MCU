
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ab8  08002ab8  00012ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002adc  08002adc  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08002adc  08002adc  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002adc  08002adc  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002adc  08002adc  00012adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08002ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000054  08002b38  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002b38  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009346  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab0  00000000  00000000  000293c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bc7  00000000  00000000  0002c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7ac  00000000  00000000  00042def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082513  00000000  00000000  0004e59b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f8  00000000  00000000  000d0b04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aa0 	.word	0x08002aa0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	08002aa0 	.word	0x08002aa0

0800014c <clear7SEG>:
#include "7segment.h"
#include "main.h"
#include "global.h"


void clear7SEG(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin|e_Pin|f_Pin|g_Pin, 1);
 8000150:	2201      	movs	r2, #1
 8000152:	217f      	movs	r1, #127	; 0x7f
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <clear7SEG+0x14>)
 8000156:	f001 fc8e 	bl	8001a76 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010c00 	.word	0x40010c00

08000164 <writeEn>:
void clear7SEG2(){
	  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin|e2_Pin|f2_Pin|g2_Pin, 1);
}
void writeEn(int index){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
 800016a:	6078      	str	r0, [r7, #4]
	switch(index){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b01      	cmp	r3, #1
 8000170:	d003      	beq.n	800017a <writeEn+0x16>
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2b02      	cmp	r3, #2
 8000176:	d00b      	beq.n	8000190 <writeEn+0x2c>
 8000178:	e015      	b.n	80001a6 <writeEn+0x42>
		case 1:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN3_Pin, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	210a      	movs	r1, #10
 800017e:	4811      	ldr	r0, [pc, #68]	; (80001c4 <writeEn+0x60>)
 8000180:	f001 fc79 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN4_Pin, 1);
 8000184:	2201      	movs	r2, #1
 8000186:	2114      	movs	r1, #20
 8000188:	480e      	ldr	r0, [pc, #56]	; (80001c4 <writeEn+0x60>)
 800018a:	f001 fc74 	bl	8001a76 <HAL_GPIO_WritePin>
			break;
 800018e:	e015      	b.n	80001bc <writeEn+0x58>
		case 2:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN3_Pin, 1);
 8000190:	2201      	movs	r2, #1
 8000192:	210a      	movs	r1, #10
 8000194:	480b      	ldr	r0, [pc, #44]	; (80001c4 <writeEn+0x60>)
 8000196:	f001 fc6e 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN4_Pin, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2114      	movs	r1, #20
 800019e:	4809      	ldr	r0, [pc, #36]	; (80001c4 <writeEn+0x60>)
 80001a0:	f001 fc69 	bl	8001a76 <HAL_GPIO_WritePin>
			break;
 80001a4:	e00a      	b.n	80001bc <writeEn+0x58>
		default:
			HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN3_Pin, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	210a      	movs	r1, #10
 80001aa:	4806      	ldr	r0, [pc, #24]	; (80001c4 <writeEn+0x60>)
 80001ac:	f001 fc63 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin|EN4_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2114      	movs	r1, #20
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <writeEn+0x60>)
 80001b6:	f001 fc5e 	bl	8001a76 <HAL_GPIO_WritePin>
			break;
 80001ba:	bf00      	nop
	}
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	40010800 	.word	0x40010800

080001c8 <display7SEG>:
void display7SEG(int num){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	2b09      	cmp	r3, #9
 80001d4:	d87f      	bhi.n	80002d6 <display7SEG+0x10e>
 80001d6:	a201      	add	r2, pc, #4	; (adr r2, 80001dc <display7SEG+0x14>)
 80001d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001dc:	08000205 	.word	0x08000205
 80001e0:	0800021b 	.word	0x0800021b
 80001e4:	08000231 	.word	0x08000231
 80001e8:	08000247 	.word	0x08000247
 80001ec:	0800025d 	.word	0x0800025d
 80001f0:	08000273 	.word	0x08000273
 80001f4:	08000289 	.word	0x08000289
 80001f8:	0800029f 	.word	0x0800029f
 80001fc:	080002b5 	.word	0x080002b5
 8000200:	080002c1 	.word	0x080002c1
    	  switch(num){
    	  	  case 0:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin|e_Pin|f_Pin, 0);
 8000204:	2200      	movs	r2, #0
 8000206:	213f      	movs	r1, #63	; 0x3f
 8000208:	4836      	ldr	r0, [pc, #216]	; (80002e4 <display7SEG+0x11c>)
 800020a:	f001 fc34 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	2140      	movs	r1, #64	; 0x40
 8000212:	4834      	ldr	r0, [pc, #208]	; (80002e4 <display7SEG+0x11c>)
 8000214:	f001 fc2f 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 8000218:	e060      	b.n	80002dc <display7SEG+0x114>
    	  	  case 1:
    	  		  HAL_GPIO_WritePin(GPIOB, b_Pin|c_Pin, 0);
 800021a:	2200      	movs	r2, #0
 800021c:	2106      	movs	r1, #6
 800021e:	4831      	ldr	r0, [pc, #196]	; (80002e4 <display7SEG+0x11c>)
 8000220:	f001 fc29 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|d_Pin|e_Pin|f_Pin|g_Pin, 1);
 8000224:	2201      	movs	r2, #1
 8000226:	2179      	movs	r1, #121	; 0x79
 8000228:	482e      	ldr	r0, [pc, #184]	; (80002e4 <display7SEG+0x11c>)
 800022a:	f001 fc24 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 800022e:	e055      	b.n	80002dc <display7SEG+0x114>
    	  	  case 2:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|d_Pin|e_Pin|g_Pin, 0);
 8000230:	2200      	movs	r2, #0
 8000232:	215b      	movs	r1, #91	; 0x5b
 8000234:	482b      	ldr	r0, [pc, #172]	; (80002e4 <display7SEG+0x11c>)
 8000236:	f001 fc1e 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, c_Pin|f_Pin, 1);
 800023a:	2201      	movs	r2, #1
 800023c:	2124      	movs	r1, #36	; 0x24
 800023e:	4829      	ldr	r0, [pc, #164]	; (80002e4 <display7SEG+0x11c>)
 8000240:	f001 fc19 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 8000244:	e04a      	b.n	80002dc <display7SEG+0x114>
    	  	  case 3:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin|g_Pin, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	214f      	movs	r1, #79	; 0x4f
 800024a:	4826      	ldr	r0, [pc, #152]	; (80002e4 <display7SEG+0x11c>)
 800024c:	f001 fc13 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, e_Pin|f_Pin, 1);
 8000250:	2201      	movs	r2, #1
 8000252:	2130      	movs	r1, #48	; 0x30
 8000254:	4823      	ldr	r0, [pc, #140]	; (80002e4 <display7SEG+0x11c>)
 8000256:	f001 fc0e 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 800025a:	e03f      	b.n	80002dc <display7SEG+0x114>
    	  	  case 4:
    	  		  HAL_GPIO_WritePin(GPIOB, b_Pin|c_Pin|f_Pin|g_Pin, 0);
 800025c:	2200      	movs	r2, #0
 800025e:	2166      	movs	r1, #102	; 0x66
 8000260:	4820      	ldr	r0, [pc, #128]	; (80002e4 <display7SEG+0x11c>)
 8000262:	f001 fc08 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|d_Pin|e_Pin, 1);
 8000266:	2201      	movs	r2, #1
 8000268:	2119      	movs	r1, #25
 800026a:	481e      	ldr	r0, [pc, #120]	; (80002e4 <display7SEG+0x11c>)
 800026c:	f001 fc03 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 8000270:	e034      	b.n	80002dc <display7SEG+0x114>
    	  	  case 5:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|c_Pin|d_Pin|f_Pin|g_Pin, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	216d      	movs	r1, #109	; 0x6d
 8000276:	481b      	ldr	r0, [pc, #108]	; (80002e4 <display7SEG+0x11c>)
 8000278:	f001 fbfd 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, b_Pin|e_Pin, 1);
 800027c:	2201      	movs	r2, #1
 800027e:	2112      	movs	r1, #18
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <display7SEG+0x11c>)
 8000282:	f001 fbf8 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 8000286:	e029      	b.n	80002dc <display7SEG+0x114>
    	  	  case 6:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|c_Pin|d_Pin|e_Pin|f_Pin|g_Pin, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	217d      	movs	r1, #125	; 0x7d
 800028c:	4815      	ldr	r0, [pc, #84]	; (80002e4 <display7SEG+0x11c>)
 800028e:	f001 fbf2 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, b_Pin, 1);
 8000292:	2201      	movs	r2, #1
 8000294:	2102      	movs	r1, #2
 8000296:	4813      	ldr	r0, [pc, #76]	; (80002e4 <display7SEG+0x11c>)
 8000298:	f001 fbed 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 800029c:	e01e      	b.n	80002dc <display7SEG+0x114>
    	  	  case 7:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	2107      	movs	r1, #7
 80002a2:	4810      	ldr	r0, [pc, #64]	; (80002e4 <display7SEG+0x11c>)
 80002a4:	f001 fbe7 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, d_Pin|e_Pin|f_Pin|g_Pin, 1);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2178      	movs	r1, #120	; 0x78
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <display7SEG+0x11c>)
 80002ae:	f001 fbe2 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 80002b2:	e013      	b.n	80002dc <display7SEG+0x114>
    	  	  case 8:
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin|e_Pin|f_Pin|g_Pin, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	217f      	movs	r1, #127	; 0x7f
 80002b8:	480a      	ldr	r0, [pc, #40]	; (80002e4 <display7SEG+0x11c>)
 80002ba:	f001 fbdc 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 80002be:	e00d      	b.n	80002dc <display7SEG+0x114>
    	  	  case 9:
    	  		  HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2110      	movs	r1, #16
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <display7SEG+0x11c>)
 80002c6:	f001 fbd6 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin|f_Pin|g_Pin, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	216f      	movs	r1, #111	; 0x6f
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <display7SEG+0x11c>)
 80002d0:	f001 fbd1 	bl	8001a76 <HAL_GPIO_WritePin>
    	  		  break;
 80002d4:	e002      	b.n	80002dc <display7SEG+0x114>
    	  	  default:
    	  		  clear7SEG();
 80002d6:	f7ff ff39 	bl	800014c <clear7SEG>
    	  		  break;
 80002da:	bf00      	nop
    	  	  }
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010c00 	.word	0x40010c00

080002e8 <display7SEG2>:
void display7SEG2(int mode){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b09      	cmp	r3, #9
 80002f4:	f200 8094 	bhi.w	8000420 <display7SEG2+0x138>
 80002f8:	a201      	add	r2, pc, #4	; (adr r2, 8000300 <display7SEG2+0x18>)
 80002fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fe:	bf00      	nop
 8000300:	08000329 	.word	0x08000329
 8000304:	08000343 	.word	0x08000343
 8000308:	0800035d 	.word	0x0800035d
 800030c:	08000377 	.word	0x08000377
 8000310:	08000391 	.word	0x08000391
 8000314:	080003ab 	.word	0x080003ab
 8000318:	080003c5 	.word	0x080003c5
 800031c:	080003df 	.word	0x080003df
 8000320:	080003f9 	.word	0x080003f9
 8000324:	08000407 	.word	0x08000407
	switch(mode){
		case 0:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin|e2_Pin|f2_Pin, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800032e:	483f      	ldr	r0, [pc, #252]	; (800042c <display7SEG2+0x144>)
 8000330:	f001 fba1 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, 1);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033a:	483c      	ldr	r0, [pc, #240]	; (800042c <display7SEG2+0x144>)
 800033c:	f001 fb9b 	bl	8001a76 <HAL_GPIO_WritePin>
			break;
 8000340:	e06f      	b.n	8000422 <display7SEG2+0x13a>
		case 1:
	  		  HAL_GPIO_WritePin(GPIOB, b2_Pin|c2_Pin, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000348:	4838      	ldr	r0, [pc, #224]	; (800042c <display7SEG2+0x144>)
 800034a:	f001 fb94 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|d2_Pin|e2_Pin|f2_Pin|g2_Pin, 1);
 800034e:	2201      	movs	r2, #1
 8000350:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 8000354:	4835      	ldr	r0, [pc, #212]	; (800042c <display7SEG2+0x144>)
 8000356:	f001 fb8e 	bl	8001a76 <HAL_GPIO_WritePin>
			break;
 800035a:	e062      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 2:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|d2_Pin|e2_Pin|g2_Pin, 0);
 800035c:	2200      	movs	r2, #0
 800035e:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 8000362:	4832      	ldr	r0, [pc, #200]	; (800042c <display7SEG2+0x144>)
 8000364:	f001 fb87 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, c2_Pin|f2_Pin, 1);
 8000368:	2201      	movs	r2, #1
 800036a:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800036e:	482f      	ldr	r0, [pc, #188]	; (800042c <display7SEG2+0x144>)
 8000370:	f001 fb81 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 8000374:	e055      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 3:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin|g2_Pin, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 800037c:	482b      	ldr	r0, [pc, #172]	; (800042c <display7SEG2+0x144>)
 800037e:	f001 fb7a 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, e2_Pin|f2_Pin, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000388:	4828      	ldr	r0, [pc, #160]	; (800042c <display7SEG2+0x144>)
 800038a:	f001 fb74 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 800038e:	e048      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 4:
	  		  HAL_GPIO_WritePin(GPIOB, b2_Pin|c2_Pin|f2_Pin|g2_Pin, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000396:	4825      	ldr	r0, [pc, #148]	; (800042c <display7SEG2+0x144>)
 8000398:	f001 fb6d 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|d2_Pin|e2_Pin, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80003a2:	4822      	ldr	r0, [pc, #136]	; (800042c <display7SEG2+0x144>)
 80003a4:	f001 fb67 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 80003a8:	e03b      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 5:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|c2_Pin|d2_Pin|f2_Pin|g2_Pin, 0);
 80003aa:	2200      	movs	r2, #0
 80003ac:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 80003b0:	481e      	ldr	r0, [pc, #120]	; (800042c <display7SEG2+0x144>)
 80003b2:	f001 fb60 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, b2_Pin|e2_Pin, 1);
 80003b6:	2201      	movs	r2, #1
 80003b8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80003bc:	481b      	ldr	r0, [pc, #108]	; (800042c <display7SEG2+0x144>)
 80003be:	f001 fb5a 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 80003c2:	e02e      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 6:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|c2_Pin|d2_Pin|e2_Pin|f2_Pin|g2_Pin, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 80003ca:	4818      	ldr	r0, [pc, #96]	; (800042c <display7SEG2+0x144>)
 80003cc:	f001 fb53 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, b2_Pin, 1);
 80003d0:	2201      	movs	r2, #1
 80003d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d6:	4815      	ldr	r0, [pc, #84]	; (800042c <display7SEG2+0x144>)
 80003d8:	f001 fb4d 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 80003dc:	e021      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 7:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80003e4:	4811      	ldr	r0, [pc, #68]	; (800042c <display7SEG2+0x144>)
 80003e6:	f001 fb46 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, d2_Pin|e2_Pin|f2_Pin|g2_Pin, 1);
 80003ea:	2201      	movs	r2, #1
 80003ec:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 80003f0:	480e      	ldr	r0, [pc, #56]	; (800042c <display7SEG2+0x144>)
 80003f2:	f001 fb40 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 80003f6:	e014      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 8:
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin|e2_Pin|f2_Pin|g2_Pin, 0);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 80003fe:	480b      	ldr	r0, [pc, #44]	; (800042c <display7SEG2+0x144>)
 8000400:	f001 fb39 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 8000404:	e00d      	b.n	8000422 <display7SEG2+0x13a>
	  	  case 9:
	  		  HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040c:	4807      	ldr	r0, [pc, #28]	; (800042c <display7SEG2+0x144>)
 800040e:	f001 fb32 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, a2_Pin|b2_Pin|c2_Pin|d2_Pin|f2_Pin|g2_Pin, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <display7SEG2+0x144>)
 800041a:	f001 fb2c 	bl	8001a76 <HAL_GPIO_WritePin>
	  		  break;
 800041e:	e000      	b.n	8000422 <display7SEG2+0x13a>
		default:
			break;
 8000420:	bf00      	nop
	}
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010c00 	.word	0x40010c00

08000430 <displayBuffer>:

void displayBuffer(int index){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3b02      	subs	r3, #2
 800043c:	2b03      	cmp	r3, #3
 800043e:	d837      	bhi.n	80004b0 <displayBuffer+0x80>
 8000440:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <displayBuffer+0x18>)
 8000442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000446:	bf00      	nop
 8000448:	08000459 	.word	0x08000459
 800044c:	0800049b 	.word	0x0800049b
 8000450:	08000485 	.word	0x08000485
 8000454:	0800046f 	.word	0x0800046f
	switch(index){
		case RED_GREEN:
			display7SEG2(temp[0]);
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <displayBuffer+0x8c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff43 	bl	80002e8 <display7SEG2>
			display7SEG(temp[2]);
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <displayBuffer+0x8c>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff feae 	bl	80001c8 <display7SEG>
			break;
 800046c:	e021      	b.n	80004b2 <displayBuffer+0x82>
		case RED_YEL:
			display7SEG2(temp[0]);
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <displayBuffer+0x8c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff38 	bl	80002e8 <display7SEG2>
			display7SEG(temp[4]);
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <displayBuffer+0x8c>)
 800047a:	691b      	ldr	r3, [r3, #16]
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fea3 	bl	80001c8 <display7SEG>
			break;
 8000482:	e016      	b.n	80004b2 <displayBuffer+0x82>
		case GREEN_RED:
			display7SEG2(temp[2]);
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <displayBuffer+0x8c>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff2d 	bl	80002e8 <display7SEG2>
			display7SEG(temp[0]);
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <displayBuffer+0x8c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe98 	bl	80001c8 <display7SEG>
			break;
 8000498:	e00b      	b.n	80004b2 <displayBuffer+0x82>
		case YEL_RED:
			display7SEG2(temp[4]);
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <displayBuffer+0x8c>)
 800049c:	691b      	ldr	r3, [r3, #16]
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff22 	bl	80002e8 <display7SEG2>
			display7SEG(temp[0]);
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <displayBuffer+0x8c>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fe8d 	bl	80001c8 <display7SEG>
			break;
 80004ae:	e000      	b.n	80004b2 <displayBuffer+0x82>
		default:
			break;
 80004b0:	bf00      	nop
	}
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	20000030 	.word	0x20000030

080004c0 <displayBuffer2>:
void displayBuffer2(int index){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b02      	subs	r3, #2
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d84f      	bhi.n	8000570 <displayBuffer2+0xb0>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <displayBuffer2+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	0800054f 	.word	0x0800054f
 80004e0:	0800052d 	.word	0x0800052d
 80004e4:	0800050b 	.word	0x0800050b
	switch(index){
		case RED_GREEN:
			display7SEG2(temp[1]--);
 80004e8:	4b24      	ldr	r3, [pc, #144]	; (800057c <displayBuffer2+0xbc>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	1e5a      	subs	r2, r3, #1
 80004ee:	4923      	ldr	r1, [pc, #140]	; (800057c <displayBuffer2+0xbc>)
 80004f0:	604a      	str	r2, [r1, #4]
 80004f2:	4618      	mov	r0, r3
 80004f4:	f7ff fef8 	bl	80002e8 <display7SEG2>
			display7SEG(temp[3]--);
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <displayBuffer2+0xbc>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	1e5a      	subs	r2, r3, #1
 80004fe:	491f      	ldr	r1, [pc, #124]	; (800057c <displayBuffer2+0xbc>)
 8000500:	60ca      	str	r2, [r1, #12]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe60 	bl	80001c8 <display7SEG>
			break;
 8000508:	e033      	b.n	8000572 <displayBuffer2+0xb2>
		case RED_YEL:
			display7SEG2(temp[1]--);
 800050a:	4b1c      	ldr	r3, [pc, #112]	; (800057c <displayBuffer2+0xbc>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	1e5a      	subs	r2, r3, #1
 8000510:	491a      	ldr	r1, [pc, #104]	; (800057c <displayBuffer2+0xbc>)
 8000512:	604a      	str	r2, [r1, #4]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff fee7 	bl	80002e8 <display7SEG2>
			display7SEG(temp[5]--);
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <displayBuffer2+0xbc>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	1e5a      	subs	r2, r3, #1
 8000520:	4916      	ldr	r1, [pc, #88]	; (800057c <displayBuffer2+0xbc>)
 8000522:	614a      	str	r2, [r1, #20]
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff fe4f 	bl	80001c8 <display7SEG>
			break;
 800052a:	e022      	b.n	8000572 <displayBuffer2+0xb2>
		case GREEN_RED:
			display7SEG2(temp[3]--);
 800052c:	4b13      	ldr	r3, [pc, #76]	; (800057c <displayBuffer2+0xbc>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	1e5a      	subs	r2, r3, #1
 8000532:	4912      	ldr	r1, [pc, #72]	; (800057c <displayBuffer2+0xbc>)
 8000534:	60ca      	str	r2, [r1, #12]
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fed6 	bl	80002e8 <display7SEG2>
			display7SEG(temp[1]--);
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <displayBuffer2+0xbc>)
 800053e:	685b      	ldr	r3, [r3, #4]
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	490e      	ldr	r1, [pc, #56]	; (800057c <displayBuffer2+0xbc>)
 8000544:	604a      	str	r2, [r1, #4]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fe3e 	bl	80001c8 <display7SEG>
			break;
 800054c:	e011      	b.n	8000572 <displayBuffer2+0xb2>
		case YEL_RED:
			display7SEG2(temp[5]--);
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <displayBuffer2+0xbc>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	4909      	ldr	r1, [pc, #36]	; (800057c <displayBuffer2+0xbc>)
 8000556:	614a      	str	r2, [r1, #20]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fec5 	bl	80002e8 <display7SEG2>
			display7SEG(temp[1]--);
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <displayBuffer2+0xbc>)
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	4905      	ldr	r1, [pc, #20]	; (800057c <displayBuffer2+0xbc>)
 8000566:	604a      	str	r2, [r1, #4]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe2d 	bl	80001c8 <display7SEG>
			break;
 800056e:	e000      	b.n	8000572 <displayBuffer2+0xb2>
		default:
			break;
 8000570:	bf00      	nop
		}
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000030 	.word	0x20000030

08000580 <RunSeg>:
void RunSeg(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if(temp[1] < 0 && temp[0] >= 1){
 8000584:	4b3d      	ldr	r3, [pc, #244]	; (800067c <RunSeg+0xfc>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	da0c      	bge.n	80005a6 <RunSeg+0x26>
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <RunSeg+0xfc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	dd08      	ble.n	80005a6 <RunSeg+0x26>
		temp[1] = 9;
 8000594:	4b39      	ldr	r3, [pc, #228]	; (800067c <RunSeg+0xfc>)
 8000596:	2209      	movs	r2, #9
 8000598:	605a      	str	r2, [r3, #4]
		temp[0]--;
 800059a:	4b38      	ldr	r3, [pc, #224]	; (800067c <RunSeg+0xfc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	4a36      	ldr	r2, [pc, #216]	; (800067c <RunSeg+0xfc>)
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	e00b      	b.n	80005be <RunSeg+0x3e>
	}else if(temp[1] < 0) {
 80005a6:	4b35      	ldr	r3, [pc, #212]	; (800067c <RunSeg+0xfc>)
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	da07      	bge.n	80005be <RunSeg+0x3e>
		temp[1] = led_buffer[1];
 80005ae:	4b34      	ldr	r3, [pc, #208]	; (8000680 <RunSeg+0x100>)
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	4a32      	ldr	r2, [pc, #200]	; (800067c <RunSeg+0xfc>)
 80005b4:	6053      	str	r3, [r2, #4]
		temp[0] = led_buffer[0];
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <RunSeg+0x100>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <RunSeg+0xfc>)
 80005bc:	6013      	str	r3, [r2, #0]
	}

	if(temp[3] < 0 && temp[2] >= 1){
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <RunSeg+0xfc>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	da0c      	bge.n	80005e0 <RunSeg+0x60>
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <RunSeg+0xfc>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dd08      	ble.n	80005e0 <RunSeg+0x60>
		temp[3] = 9;
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <RunSeg+0xfc>)
 80005d0:	2209      	movs	r2, #9
 80005d2:	60da      	str	r2, [r3, #12]
		temp[2]--;
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <RunSeg+0xfc>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	3b01      	subs	r3, #1
 80005da:	4a28      	ldr	r2, [pc, #160]	; (800067c <RunSeg+0xfc>)
 80005dc:	6093      	str	r3, [r2, #8]
 80005de:	e00b      	b.n	80005f8 <RunSeg+0x78>
	}else if(temp[3] < 0) {
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <RunSeg+0xfc>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da07      	bge.n	80005f8 <RunSeg+0x78>
		temp[3] = led_buffer[3];
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <RunSeg+0x100>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a23      	ldr	r2, [pc, #140]	; (800067c <RunSeg+0xfc>)
 80005ee:	60d3      	str	r3, [r2, #12]
		temp[2] = led_buffer[2];
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <RunSeg+0x100>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <RunSeg+0xfc>)
 80005f6:	6093      	str	r3, [r2, #8]
	}

	if(temp[5] < 0 && temp[4] >= 1){
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <RunSeg+0xfc>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da0c      	bge.n	800061a <RunSeg+0x9a>
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <RunSeg+0xfc>)
 8000602:	691b      	ldr	r3, [r3, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	dd08      	ble.n	800061a <RunSeg+0x9a>
		temp[5] = 9;
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <RunSeg+0xfc>)
 800060a:	2209      	movs	r2, #9
 800060c:	615a      	str	r2, [r3, #20]
		temp[4]--;
 800060e:	4b1b      	ldr	r3, [pc, #108]	; (800067c <RunSeg+0xfc>)
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	3b01      	subs	r3, #1
 8000614:	4a19      	ldr	r2, [pc, #100]	; (800067c <RunSeg+0xfc>)
 8000616:	6113      	str	r3, [r2, #16]
 8000618:	e00b      	b.n	8000632 <RunSeg+0xb2>
	}else if(temp[5] < 0) {
 800061a:	4b18      	ldr	r3, [pc, #96]	; (800067c <RunSeg+0xfc>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	2b00      	cmp	r3, #0
 8000620:	da07      	bge.n	8000632 <RunSeg+0xb2>
		temp[5] = led_buffer[5];
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <RunSeg+0x100>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <RunSeg+0xfc>)
 8000628:	6153      	str	r3, [r2, #20]
		temp[4] = led_buffer[4];
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <RunSeg+0x100>)
 800062c:	691b      	ldr	r3, [r3, #16]
 800062e:	4a13      	ldr	r2, [pc, #76]	; (800067c <RunSeg+0xfc>)
 8000630:	6113      	str	r3, [r2, #16]
	}

	if(timer_flag[2]){
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <RunSeg+0x104>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00d      	beq.n	8000656 <RunSeg+0xd6>
		setTimer(2,1000);
 800063a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800063e:	2002      	movs	r0, #2
 8000640:	f000 fe14 	bl	800126c <setTimer>
		writeEn(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff fd8d 	bl	8000164 <writeEn>
		displayBuffer(status);
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <RunSeg+0x108>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff feee 	bl	8000430 <displayBuffer>
	else if(timer_flag[3]){
		setTimer(3,1000);
		writeEn(2);
		displayBuffer2(status);
	}
}
 8000654:	e010      	b.n	8000678 <RunSeg+0xf8>
	else if(timer_flag[3]){
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <RunSeg+0x104>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00c      	beq.n	8000678 <RunSeg+0xf8>
		setTimer(3,1000);
 800065e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000662:	2003      	movs	r0, #3
 8000664:	f000 fe02 	bl	800126c <setTimer>
		writeEn(2);
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff fd7b 	bl	8000164 <writeEn>
		displayBuffer2(status);
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <RunSeg+0x108>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff ff24 	bl	80004c0 <displayBuffer2>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000030 	.word	0x20000030
 8000680:	20000018 	.word	0x20000018
 8000684:	20000144 	.word	0x20000144
 8000688:	20000070 	.word	0x20000070

0800068c <RunSegMode2>:

void RunSegMode2(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	if(isButtonPressed(1)){
 8000690:	2001      	movs	r0, #1
 8000692:	f000 f96f 	bl	8000974 <isButtonPressed>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d01f      	beq.n	80006dc <RunSegMode2+0x50>
		temp[1]++;
 800069c:	4b2b      	ldr	r3, [pc, #172]	; (800074c <RunSegMode2+0xc0>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a2a      	ldr	r2, [pc, #168]	; (800074c <RunSegMode2+0xc0>)
 80006a4:	6053      	str	r3, [r2, #4]
		if(temp[1] == 10 && temp[0] == 9) {
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <RunSegMode2+0xc0>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d109      	bne.n	80006c2 <RunSegMode2+0x36>
 80006ae:	4b27      	ldr	r3, [pc, #156]	; (800074c <RunSegMode2+0xc0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b09      	cmp	r3, #9
 80006b4:	d105      	bne.n	80006c2 <RunSegMode2+0x36>
			temp[0] = 0;
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <RunSegMode2+0xc0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
			temp[1] = 0;
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <RunSegMode2+0xc0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
		}
		if(temp[1] > 9 ){
 80006c2:	4b22      	ldr	r3, [pc, #136]	; (800074c <RunSegMode2+0xc0>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	2b09      	cmp	r3, #9
 80006c8:	dd16      	ble.n	80006f8 <RunSegMode2+0x6c>
			temp[1] = 0;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <RunSegMode2+0xc0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	605a      	str	r2, [r3, #4]
			temp[0]++;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <RunSegMode2+0xc0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a1d      	ldr	r2, [pc, #116]	; (800074c <RunSegMode2+0xc0>)
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	e00d      	b.n	80006f8 <RunSegMode2+0x6c>
		}
	}
	else if(isButtonPressed(2)){
 80006dc:	2002      	movs	r0, #2
 80006de:	f000 f949 	bl	8000974 <isButtonPressed>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d007      	beq.n	80006f8 <RunSegMode2+0x6c>
		led_buffer[0] = temp[0] ;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <RunSegMode2+0xc0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a18      	ldr	r2, [pc, #96]	; (8000750 <RunSegMode2+0xc4>)
 80006ee:	6013      	str	r3, [r2, #0]
		led_buffer[1] = temp[1];
 80006f0:	4b16      	ldr	r3, [pc, #88]	; (800074c <RunSegMode2+0xc0>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	4a16      	ldr	r2, [pc, #88]	; (8000750 <RunSegMode2+0xc4>)
 80006f6:	6053      	str	r3, [r2, #4]
	}
	if(timer_flag[2]){
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <RunSegMode2+0xc8>)
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d00f      	beq.n	8000720 <RunSegMode2+0x94>
		setTimer(2,100);
 8000700:	2164      	movs	r1, #100	; 0x64
 8000702:	2002      	movs	r0, #2
 8000704:	f000 fdb2 	bl	800126c <setTimer>
		writeEn(1);
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff fd2b 	bl	8000164 <writeEn>
		display7SEG2(0);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fdea 	bl	80002e8 <display7SEG2>
		display7SEG(temp[0]);
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <RunSegMode2+0xc0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff fd55 	bl	80001c8 <display7SEG>
		setTimer(3,100);
		writeEn(2);
		display7SEG2(2);
		display7SEG( temp[1] );
	}
}
 800071e:	e012      	b.n	8000746 <RunSegMode2+0xba>
	else if(timer_flag[3]){
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <RunSegMode2+0xc8>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d00e      	beq.n	8000746 <RunSegMode2+0xba>
		setTimer(3,100);
 8000728:	2164      	movs	r1, #100	; 0x64
 800072a:	2003      	movs	r0, #3
 800072c:	f000 fd9e 	bl	800126c <setTimer>
		writeEn(2);
 8000730:	2002      	movs	r0, #2
 8000732:	f7ff fd17 	bl	8000164 <writeEn>
		display7SEG2(2);
 8000736:	2002      	movs	r0, #2
 8000738:	f7ff fdd6 	bl	80002e8 <display7SEG2>
		display7SEG( temp[1] );
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <RunSegMode2+0xc0>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd41 	bl	80001c8 <display7SEG>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000030 	.word	0x20000030
 8000750:	20000018 	.word	0x20000018
 8000754:	20000144 	.word	0x20000144

08000758 <RunSegMode3>:
void RunSegMode3(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	if(isButtonPressed(1)){
 800075c:	2001      	movs	r0, #1
 800075e:	f000 f909 	bl	8000974 <isButtonPressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d01f      	beq.n	80007a8 <RunSegMode3+0x50>
		temp[5]++;
 8000768:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <RunSegMode3+0xc0>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	4a2a      	ldr	r2, [pc, #168]	; (8000818 <RunSegMode3+0xc0>)
 8000770:	6153      	str	r3, [r2, #20]
		if(temp[5] == 10 && temp[4] == 9){
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <RunSegMode3+0xc0>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	2b0a      	cmp	r3, #10
 8000778:	d109      	bne.n	800078e <RunSegMode3+0x36>
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <RunSegMode3+0xc0>)
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	2b09      	cmp	r3, #9
 8000780:	d105      	bne.n	800078e <RunSegMode3+0x36>
			temp[5] = 0;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <RunSegMode3+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	615a      	str	r2, [r3, #20]
			temp[4] = 0;
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <RunSegMode3+0xc0>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
		}
		if(temp[5] > 9){
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <RunSegMode3+0xc0>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	2b09      	cmp	r3, #9
 8000794:	dd16      	ble.n	80007c4 <RunSegMode3+0x6c>
			temp[5] = 0;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <RunSegMode3+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
			temp[4]++;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <RunSegMode3+0xc0>)
 800079e:	691b      	ldr	r3, [r3, #16]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <RunSegMode3+0xc0>)
 80007a4:	6113      	str	r3, [r2, #16]
 80007a6:	e00d      	b.n	80007c4 <RunSegMode3+0x6c>
		}
	}
	else if(isButtonPressed(2)){
 80007a8:	2002      	movs	r0, #2
 80007aa:	f000 f8e3 	bl	8000974 <isButtonPressed>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d007      	beq.n	80007c4 <RunSegMode3+0x6c>
		led_buffer[5] = temp[5];
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <RunSegMode3+0xc0>)
 80007b6:	695b      	ldr	r3, [r3, #20]
 80007b8:	4a18      	ldr	r2, [pc, #96]	; (800081c <RunSegMode3+0xc4>)
 80007ba:	6153      	str	r3, [r2, #20]
		led_buffer[4] = temp[4];
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <RunSegMode3+0xc0>)
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	4a16      	ldr	r2, [pc, #88]	; (800081c <RunSegMode3+0xc4>)
 80007c2:	6113      	str	r3, [r2, #16]
	}
	if(timer_flag[2]){
 80007c4:	4b16      	ldr	r3, [pc, #88]	; (8000820 <RunSegMode3+0xc8>)
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00f      	beq.n	80007ec <RunSegMode3+0x94>
		setTimer(2,100);
 80007cc:	2164      	movs	r1, #100	; 0x64
 80007ce:	2002      	movs	r0, #2
 80007d0:	f000 fd4c 	bl	800126c <setTimer>
		writeEn(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fcc5 	bl	8000164 <writeEn>
		display7SEG2(0);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fd84 	bl	80002e8 <display7SEG2>
		display7SEG(temp[4]);
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <RunSegMode3+0xc0>)
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fcef 	bl	80001c8 <display7SEG>
		setTimer(3,100);
		writeEn(2);
		display7SEG2(3);
		display7SEG(temp[5]);
	}
}
 80007ea:	e012      	b.n	8000812 <RunSegMode3+0xba>
	else if(timer_flag[3]){
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <RunSegMode3+0xc8>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d00e      	beq.n	8000812 <RunSegMode3+0xba>
		setTimer(3,100);
 80007f4:	2164      	movs	r1, #100	; 0x64
 80007f6:	2003      	movs	r0, #3
 80007f8:	f000 fd38 	bl	800126c <setTimer>
		writeEn(2);
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff fcb1 	bl	8000164 <writeEn>
		display7SEG2(3);
 8000802:	2003      	movs	r0, #3
 8000804:	f7ff fd70 	bl	80002e8 <display7SEG2>
		display7SEG(temp[5]);
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <RunSegMode3+0xc0>)
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fcdb 	bl	80001c8 <display7SEG>
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000030 	.word	0x20000030
 800081c:	20000018 	.word	0x20000018
 8000820:	20000144 	.word	0x20000144

08000824 <RunSegMode4>:
void RunSegMode4(){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	if(isButtonPressed(1)){
 8000828:	2001      	movs	r0, #1
 800082a:	f000 f8a3 	bl	8000974 <isButtonPressed>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d01f      	beq.n	8000874 <RunSegMode4+0x50>
		temp[3]++;
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <RunSegMode4+0xc0>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <RunSegMode4+0xc0>)
 800083c:	60d3      	str	r3, [r2, #12]
		if(temp[3] == 10 && temp[2] == 9){
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <RunSegMode4+0xc0>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b0a      	cmp	r3, #10
 8000844:	d109      	bne.n	800085a <RunSegMode4+0x36>
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <RunSegMode4+0xc0>)
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	2b09      	cmp	r3, #9
 800084c:	d105      	bne.n	800085a <RunSegMode4+0x36>
			temp[3] = 0;
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <RunSegMode4+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
			temp[2] = 0;
 8000854:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <RunSegMode4+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
		}
		if(temp[3] > 9){
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <RunSegMode4+0xc0>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	2b09      	cmp	r3, #9
 8000860:	dd16      	ble.n	8000890 <RunSegMode4+0x6c>
			temp[3] = 0;
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <RunSegMode4+0xc0>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
			temp[2]++;
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <RunSegMode4+0xc0>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	3301      	adds	r3, #1
 800086e:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <RunSegMode4+0xc0>)
 8000870:	6093      	str	r3, [r2, #8]
 8000872:	e00d      	b.n	8000890 <RunSegMode4+0x6c>
		}
	}
	else if(isButtonPressed(2)){
 8000874:	2002      	movs	r0, #2
 8000876:	f000 f87d 	bl	8000974 <isButtonPressed>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d007      	beq.n	8000890 <RunSegMode4+0x6c>
		led_buffer[3] = temp[3];
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <RunSegMode4+0xc0>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <RunSegMode4+0xc4>)
 8000886:	60d3      	str	r3, [r2, #12]
		led_buffer[2] = temp[2];
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <RunSegMode4+0xc0>)
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <RunSegMode4+0xc4>)
 800088e:	6093      	str	r3, [r2, #8]
	}
	if(timer_flag[2]){
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <RunSegMode4+0xc8>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d00f      	beq.n	80008b8 <RunSegMode4+0x94>
		setTimer(2,100);
 8000898:	2164      	movs	r1, #100	; 0x64
 800089a:	2002      	movs	r0, #2
 800089c:	f000 fce6 	bl	800126c <setTimer>
		writeEn(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f7ff fc5f 	bl	8000164 <writeEn>
		display7SEG2(0);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fd1e 	bl	80002e8 <display7SEG2>
		display7SEG(temp[2]);
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <RunSegMode4+0xc0>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fc89 	bl	80001c8 <display7SEG>
		setTimer(3,100);
		writeEn(2);
		display7SEG2(4);
		display7SEG(temp[3]);
	}
}
 80008b6:	e012      	b.n	80008de <RunSegMode4+0xba>
	else if(timer_flag[3]){
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <RunSegMode4+0xc8>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d00e      	beq.n	80008de <RunSegMode4+0xba>
		setTimer(3,100);
 80008c0:	2164      	movs	r1, #100	; 0x64
 80008c2:	2003      	movs	r0, #3
 80008c4:	f000 fcd2 	bl	800126c <setTimer>
		writeEn(2);
 80008c8:	2002      	movs	r0, #2
 80008ca:	f7ff fc4b 	bl	8000164 <writeEn>
		display7SEG2(4);
 80008ce:	2004      	movs	r0, #4
 80008d0:	f7ff fd0a 	bl	80002e8 <display7SEG2>
		display7SEG(temp[3]);
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <RunSegMode4+0xc0>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fc75 	bl	80001c8 <display7SEG>
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20000030 	.word	0x20000030
 80008e8:	20000018 	.word	0x20000018
 80008ec:	20000144 	.word	0x20000144

080008f0 <setButton>:
int TimeOutForKeyPress[NUM_BUTTON];
int button_pressed[NUM_BUTTON];
int button_long_pressed[NUM_BUTTON];
int button_flag[NUM_BUTTON];

void setButton(int i){
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
		 KeyReg0[i] = NORMAL_STATE;
 80008f8:	4a16      	ldr	r2, [pc, #88]	; (8000954 <setButton+0x64>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2101      	movs	r1, #1
 80008fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg1[i] = NORMAL_STATE;
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <setButton+0x68>)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2101      	movs	r1, #1
 8000908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg2[i] = NORMAL_STATE;
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <setButton+0x6c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2101      	movs	r1, #1
 8000912:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 KeyReg3[i] = NORMAL_STATE;
 8000916:	4a12      	ldr	r2, [pc, #72]	; (8000960 <setButton+0x70>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2101      	movs	r1, #1
 800091c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		 TimeOutForKeyPress[i] =  500;
 8000920:	4a10      	ldr	r2, [pc, #64]	; (8000964 <setButton+0x74>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000928:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_pressed[i] = 0;
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <setButton+0x78>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2100      	movs	r1, #0
 8000932:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_long_pressed[i] = 0;
 8000936:	4a0d      	ldr	r2, [pc, #52]	; (800096c <setButton+0x7c>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2100      	movs	r1, #0
 800093c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 button_flag[i] = 0;
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <setButton+0x80>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2100      	movs	r1, #0
 8000946:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000080 	.word	0x20000080
 8000958:	2000008c 	.word	0x2000008c
 800095c:	200000bc 	.word	0x200000bc
 8000960:	20000074 	.word	0x20000074
 8000964:	20000098 	.word	0x20000098
 8000968:	200000b0 	.word	0x200000b0
 800096c:	200000c8 	.word	0x200000c8
 8000970:	200000a4 	.word	0x200000a4

08000974 <isButtonPressed>:


GPIO_TypeDef* button_ports[] = {Button1_GPIO_Port,Button2_GPIO_Port,Button3_GPIO_Port};
uint16_t button_pins[] = {Button1_Pin, Button2_Pin, Button3_Pin};

int isButtonPressed( int index ){
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 800097c:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <isButtonPressed+0x94>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d13a      	bne.n	80009fe <isButtonPressed+0x8a>
		if(index == 0) {
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d11d      	bne.n	80009ca <isButtonPressed+0x56>
			mode++;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <isButtonPressed+0x98>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	3301      	adds	r3, #1
 8000994:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <isButtonPressed+0x98>)
 8000996:	6013      	str	r3, [r2, #0]
			setTimer(2, 50); // for 7SEG
 8000998:	2132      	movs	r1, #50	; 0x32
 800099a:	2002      	movs	r0, #2
 800099c:	f000 fc66 	bl	800126c <setTimer>
			setTimer(3, 100); //for 7SEG
 80009a0:	2164      	movs	r1, #100	; 0x64
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 fc62 	bl	800126c <setTimer>

			for(int i = 0 ; i < 6; i++) temp[i] = led_buffer[i];
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e00a      	b.n	80009c4 <isButtonPressed+0x50>
 80009ae:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <isButtonPressed+0x9c>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b6:	4917      	ldr	r1, [pc, #92]	; (8000a14 <isButtonPressed+0xa0>)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b05      	cmp	r3, #5
 80009c8:	ddf1      	ble.n	80009ae <isButtonPressed+0x3a>
		}
		if(mode > 4) {
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <isButtonPressed+0x98>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	dd0e      	ble.n	80009f0 <isButtonPressed+0x7c>
			status = INIT;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <isButtonPressed+0xa4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
			mode = 1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <isButtonPressed+0x98>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]
			setTimer(2, 10); // for 7SEG
 80009de:	210a      	movs	r1, #10
 80009e0:	2002      	movs	r0, #2
 80009e2:	f000 fc43 	bl	800126c <setTimer>
			setTimer(3, 510); //for 7SEG
 80009e6:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 fc3e 	bl	800126c <setTimer>
		}
		button_flag[index] = 0;
 80009f0:	4a05      	ldr	r2, [pc, #20]	; (8000a08 <isButtonPressed+0x94>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2100      	movs	r1, #0
 80009f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e000      	b.n	8000a00 <isButtonPressed+0x8c>
	}
	return 0;
 80009fe:	2300      	movs	r3, #0
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000a4 	.word	0x200000a4
 8000a0c:	20000014 	.word	0x20000014
 8000a10:	20000018 	.word	0x20000018
 8000a14:	20000030 	.word	0x20000030
 8000a18:	20000070 	.word	0x20000070

08000a1c <getKeyInput>:
	//TODO
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	button_flag[index] = 1;
}

void getKeyInput(){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_BUTTON; i++){
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	e07c      	b.n	8000b22 <getKeyInput+0x106>
		KeyReg2[i] = KeyReg1[i];
 8000a28:	4a42      	ldr	r2, [pc, #264]	; (8000b34 <getKeyInput+0x118>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a30:	4941      	ldr	r1, [pc, #260]	; (8000b38 <getKeyInput+0x11c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000a38:	4a40      	ldr	r2, [pc, #256]	; (8000b3c <getKeyInput+0x120>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a40:	493c      	ldr	r1, [pc, #240]	; (8000b34 <getKeyInput+0x118>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // Add your key
	  KeyReg0[i] = HAL_GPIO_ReadPin(button_ports[i], button_pins[i]);
 8000a48:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <getKeyInput+0x124>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a50:	493c      	ldr	r1, [pc, #240]	; (8000b44 <getKeyInput+0x128>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	f000 fff4 	bl	8001a48 <HAL_GPIO_ReadPin>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <getKeyInput+0x120>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a6c:	4a31      	ldr	r2, [pc, #196]	; (8000b34 <getKeyInput+0x118>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a74:	4931      	ldr	r1, [pc, #196]	; (8000b3c <getKeyInput+0x120>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d14d      	bne.n	8000b1c <getKeyInput+0x100>
 8000a80:	4a2c      	ldr	r2, [pc, #176]	; (8000b34 <getKeyInput+0x118>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a88:	492b      	ldr	r1, [pc, #172]	; (8000b38 <getKeyInput+0x11c>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d143      	bne.n	8000b1c <getKeyInput+0x100>
		if (KeyReg2[i] != KeyReg3[i]){
 8000a94:	4a28      	ldr	r2, [pc, #160]	; (8000b38 <getKeyInput+0x11c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a9c:	492a      	ldr	r1, [pc, #168]	; (8000b48 <getKeyInput+0x12c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d019      	beq.n	8000adc <getKeyInput+0xc0>
		  KeyReg3[i] = KeyReg2[i];
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <getKeyInput+0x11c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab0:	4925      	ldr	r1, [pc, #148]	; (8000b48 <getKeyInput+0x12c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		  if (KeyReg3[i] == PRESSED_STATE){
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <getKeyInput+0x12c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d12b      	bne.n	8000b1c <getKeyInput+0x100>
			TimeOutForKeyPress[i] = 500;
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <getKeyInput+0x130>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000acc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			//subKeyProcess();
			button_flag[i] = 1;
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <getKeyInput+0x134>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ada:	e01f      	b.n	8000b1c <getKeyInput+0x100>
		  }

		}else{
			TimeOutForKeyPress[i] --;
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <getKeyInput+0x130>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	4919      	ldr	r1, [pc, #100]	; (8000b4c <getKeyInput+0x130>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimeOutForKeyPress[i] == 0){
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <getKeyInput+0x130>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d110      	bne.n	8000b1c <getKeyInput+0x100>
				TimeOutForKeyPress[i] = 500;
 8000afa:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <getKeyInput+0x130>)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <getKeyInput+0x12c>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d104      	bne.n	8000b1c <getKeyInput+0x100>
					//subKeyProcess();
					button_flag[i] = 1;
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <getKeyInput+0x134>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2101      	movs	r1, #1
 8000b18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUM_BUTTON; i++){
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	f77f af7f 	ble.w	8000a28 <getKeyInput+0xc>
				}
			}
		}
	  }
	}
}
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	200000bc 	.word	0x200000bc
 8000b3c:	20000080 	.word	0x20000080
 8000b40:	20000000 	.word	0x20000000
 8000b44:	2000000c 	.word	0x2000000c
 8000b48:	20000074 	.word	0x20000074
 8000b4c:	20000098 	.word	0x20000098
 8000b50:	200000a4 	.word	0x200000a4

08000b54 <initState>:
 *      Author: ADMIN
 */
#include "fsm_automatic.h"
#include "global.h"

void initState(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	display7SEG(0);
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fb35 	bl	80001c8 <display7SEG>
	display7SEG2(0);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fbc2 	bl	80002e8 <display7SEG2>
	writeEn(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fafd 	bl	8000164 <writeEn>

	HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|GREEN_LED2_Pin, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <initState+0x34>)
 8000b72:	f000 ff80 	bl	8001a76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin|YEL_LED1_Pin|RED_LED2_Pin|YEL_LED2_Pin, 1);
 8000b76:	2201      	movs	r2, #1
 8000b78:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <initState+0x34>)
 8000b7e:	f000 ff7a 	bl	8001a76 <HAL_GPIO_WritePin>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40010800 	.word	0x40010800

08000b8c <checkTime>:

void checkTime(){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
	int red_time = led_buffer[0]*10 + led_buffer[1] + 1;
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <checkTime+0x9c>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <checkTime+0x9c>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
	int green_time = led_buffer[2]*10 + led_buffer[3] + 1;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <checkTime+0x9c>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4613      	mov	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <checkTime+0x9c>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
	int yel_time = led_buffer[4]*10 + led_buffer[5] + 1;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <checkTime+0x9c>)
 8000bc4:	691a      	ldr	r2, [r3, #16]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4413      	add	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <checkTime+0x9c>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	607b      	str	r3, [r7, #4]
	int yel_green_time = yel_time + green_time;
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4413      	add	r3, r2
 8000be0:	603b      	str	r3, [r7, #0]

	if(red_time != yel_green_time ){
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d018      	beq.n	8000c1c <checkTime+0x90>
		led_buffer[1] = (yel_green_time - 1)%10;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	1e59      	subs	r1, r3, #1
 8000bee:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <checkTime+0xa0>)
 8000bf0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bf4:	109a      	asrs	r2, r3, #2
 8000bf6:	17cb      	asrs	r3, r1, #31
 8000bf8:	1ad2      	subs	r2, r2, r3
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	1aca      	subs	r2, r1, r3
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <checkTime+0x9c>)
 8000c06:	605a      	str	r2, [r3, #4]
		led_buffer[0] = (yel_green_time - 1)/10;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <checkTime+0xa0>)
 8000c0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000c12:	1092      	asrs	r2, r2, #2
 8000c14:	17db      	asrs	r3, r3, #31
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <checkTime+0x9c>)
 8000c1a:	6013      	str	r3, [r2, #0]
	}
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000018 	.word	0x20000018
 8000c2c:	66666667 	.word	0x66666667

08000c30 <fsm_automatic_run>:

void fsm_automatic_run(){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	switch(status){
 8000c34:	4bba      	ldr	r3, [pc, #744]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	2b0d      	cmp	r3, #13
 8000c3c:	f200 81d5 	bhi.w	8000fea <fsm_automatic_run+0x3ba>
 8000c40:	a201      	add	r2, pc, #4	; (adr r2, 8000c48 <fsm_automatic_run+0x18>)
 8000c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c46:	bf00      	nop
 8000c48:	08000c81 	.word	0x08000c81
 8000c4c:	08000cd3 	.word	0x08000cd3
 8000c50:	08000e25 	.word	0x08000e25
 8000c54:	08000db1 	.word	0x08000db1
 8000c58:	08000d3d 	.word	0x08000d3d
 8000c5c:	08000feb 	.word	0x08000feb
 8000c60:	08000feb 	.word	0x08000feb
 8000c64:	08000feb 	.word	0x08000feb
 8000c68:	08000feb 	.word	0x08000feb
 8000c6c:	08000feb 	.word	0x08000feb
 8000c70:	08000e95 	.word	0x08000e95
 8000c74:	08000ec5 	.word	0x08000ec5
 8000c78:	08000f35 	.word	0x08000f35
 8000c7c:	08000f8f 	.word	0x08000f8f
		case INIT:
			checkTime();
 8000c80:	f7ff ff84 	bl	8000b8c <checkTime>
			status = RED_GREEN;
 8000c84:	4ba6      	ldr	r3, [pc, #664]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | YEL_LED1_Pin | GREEN_LED1_Pin | RED_LED2_Pin | YEL_LED2_Pin | GREEN_LED2_Pin, 1);
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000c90:	48a4      	ldr	r0, [pc, #656]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000c92:	f000 fef0 	bl	8001a76 <HAL_GPIO_WritePin>
			setTimer(0, (led_buffer[3] + 1)*1000 + led_buffer[2]*10000);
 8000c96:	4ba4      	ldr	r3, [pc, #656]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca0:	fb02 f203 	mul.w	r2, r2, r3
 8000ca4:	4ba0      	ldr	r3, [pc, #640]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cac:	fb01 f303 	mul.w	r3, r1, r3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 fad9 	bl	800126c <setTimer>
			if(isButtonPressed(0)){
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fe5a 	bl	8000974 <isButtonPressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d002      	beq.n	8000ccc <fsm_automatic_run+0x9c>
				status = INIT_2;
 8000cc6:	4b96      	ldr	r3, [pc, #600]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000cc8:	220b      	movs	r2, #11
 8000cca:	601a      	str	r2, [r3, #0]
			}
			RunSeg();
 8000ccc:	f7ff fc58 	bl	8000580 <RunSeg>
			break;
 8000cd0:	e18c      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case RED_GREEN:
			HAL_GPIO_WritePin(GPIOA, YEL_LED1_Pin | RED_LED2_Pin, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000cd8:	4892      	ldr	r0, [pc, #584]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000cda:	f000 fecc 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | GREEN_LED2_Pin, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ce4:	488f      	ldr	r0, [pc, #572]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000ce6:	f000 fec6 	bl	8001a76 <HAL_GPIO_WritePin>
			if(timer_flag[0] && mode == 1){
 8000cea:	4b90      	ldr	r3, [pc, #576]	; (8000f2c <fsm_automatic_run+0x2fc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d018      	beq.n	8000d24 <fsm_automatic_run+0xf4>
 8000cf2:	4b8f      	ldr	r3, [pc, #572]	; (8000f30 <fsm_automatic_run+0x300>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d114      	bne.n	8000d24 <fsm_automatic_run+0xf4>
				status = RED_YEL;
 8000cfa:	4b89      	ldr	r3, [pc, #548]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	601a      	str	r2, [r3, #0]
				setTimer(0, (led_buffer[5] + 1)*1000 + led_buffer[4]*10000);
 8000d00:	4b89      	ldr	r3, [pc, #548]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	3301      	adds	r3, #1
 8000d06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d0a:	fb02 f203 	mul.w	r2, r2, r3
 8000d0e:	4b86      	ldr	r3, [pc, #536]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d16:	fb01 f303 	mul.w	r3, r1, r3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 faa4 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe25 	bl	8000974 <isButtonPressed>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d002      	beq.n	8000d36 <fsm_automatic_run+0x106>
				status = INIT_2;
 8000d30:	4b7b      	ldr	r3, [pc, #492]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000d32:	220b      	movs	r2, #11
 8000d34:	601a      	str	r2, [r3, #0]
			}
			RunSeg();
 8000d36:	f7ff fc23 	bl	8000580 <RunSeg>
			break;
 8000d3a:	e157      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case RED_YEL:
			HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	4878      	ldr	r0, [pc, #480]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000d44:	f000 fe97 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YEL_LED2_GPIO_Port, YEL_LED2_Pin, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	4875      	ldr	r0, [pc, #468]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000d50:	f000 fe91 	bl	8001a76 <HAL_GPIO_WritePin>
			if(timer_flag[0] && mode == 1){
 8000d54:	4b75      	ldr	r3, [pc, #468]	; (8000f2c <fsm_automatic_run+0x2fc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d01d      	beq.n	8000d98 <fsm_automatic_run+0x168>
 8000d5c:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <fsm_automatic_run+0x300>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d119      	bne.n	8000d98 <fsm_automatic_run+0x168>
				status = GREEN_RED;
 8000d64:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	601a      	str	r2, [r3, #0]
				display7SEG(led_buffer[3]);
 8000d6a:	4b6f      	ldr	r3, [pc, #444]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fa2a 	bl	80001c8 <display7SEG>
				setTimer(0, (led_buffer[3] + 1)*1000 + led_buffer[2]*10000);
 8000d74:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d7e:	fb02 f203 	mul.w	r2, r2, r3
 8000d82:	4b69      	ldr	r3, [pc, #420]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 fa6a 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fdeb 	bl	8000974 <isButtonPressed>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <fsm_automatic_run+0x17a>
				status = INIT_2;
 8000da4:	4b5e      	ldr	r3, [pc, #376]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000da6:	220b      	movs	r2, #11
 8000da8:	601a      	str	r2, [r3, #0]
			}
			RunSeg();
 8000daa:	f7ff fbe9 	bl	8000580 <RunSeg>
			break;
 8000dae:	e11d      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case GREEN_RED:
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | YEL_LED2_Pin, 1);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 7108 	mov.w	r1, #544	; 0x220
 8000db6:	485b      	ldr	r0, [pc, #364]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000db8:	f000 fe5d 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin | RED_LED2_Pin, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000dc2:	4858      	ldr	r0, [pc, #352]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000dc4:	f000 fe57 	bl	8001a76 <HAL_GPIO_WritePin>
			if(timer_flag[0] && mode == 1){
 8000dc8:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <fsm_automatic_run+0x2fc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01d      	beq.n	8000e0c <fsm_automatic_run+0x1dc>
 8000dd0:	4b57      	ldr	r3, [pc, #348]	; (8000f30 <fsm_automatic_run+0x300>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d119      	bne.n	8000e0c <fsm_automatic_run+0x1dc>
				status = YEL_RED;
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000dda:	2203      	movs	r2, #3
 8000ddc:	601a      	str	r2, [r3, #0]
				display7SEG(led_buffer[5]);
 8000dde:	4b52      	ldr	r3, [pc, #328]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff f9f0 	bl	80001c8 <display7SEG>
				setTimer(0, (led_buffer[5] + 1)*1000 + led_buffer[4]*10000);
 8000de8:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df2:	fb02 f203 	mul.w	r2, r2, r3
 8000df6:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	f242 7110 	movw	r1, #10000	; 0x2710
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 fa30 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f7ff fdb1 	bl	8000974 <isButtonPressed>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d002      	beq.n	8000e1e <fsm_automatic_run+0x1ee>
				status = INIT_2;
 8000e18:	4b41      	ldr	r3, [pc, #260]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000e1a:	220b      	movs	r2, #11
 8000e1c:	601a      	str	r2, [r3, #0]
			}
			RunSeg();
 8000e1e:	f7ff fbaf 	bl	8000580 <RunSeg>
			break;
 8000e22:	e0e3      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case YEL_RED:
			HAL_GPIO_WritePin(YEL_LED1_GPIO_Port, YEL_LED1_Pin, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2140      	movs	r1, #64	; 0x40
 8000e28:	483e      	ldr	r0, [pc, #248]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000e2a:	f000 fe24 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, 1);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	483c      	ldr	r0, [pc, #240]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000e34:	f000 fe1f 	bl	8001a76 <HAL_GPIO_WritePin>
			if(timer_flag[0]  && mode == 1){
 8000e38:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <fsm_automatic_run+0x2fc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01d      	beq.n	8000e7c <fsm_automatic_run+0x24c>
 8000e40:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <fsm_automatic_run+0x300>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d119      	bne.n	8000e7c <fsm_automatic_run+0x24c>
				status = RED_GREEN;
 8000e48:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	601a      	str	r2, [r3, #0]
				display7SEG(led_buffer[1]);
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff f9b8 	bl	80001c8 <display7SEG>
				setTimer(0, (led_buffer[3] + 1)*1000 + led_buffer[2]*10000);
 8000e58:	4b33      	ldr	r3, [pc, #204]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e62:	fb02 f203 	mul.w	r2, r2, r3
 8000e66:	4b30      	ldr	r3, [pc, #192]	; (8000f28 <fsm_automatic_run+0x2f8>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e6e:	fb01 f303 	mul.w	r3, r1, r3
 8000e72:	4413      	add	r3, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f9f8 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f7ff fd79 	bl	8000974 <isButtonPressed>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <fsm_automatic_run+0x25e>
				status = INIT_2;
 8000e88:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000e8a:	220b      	movs	r2, #11
 8000e8c:	601a      	str	r2, [r3, #0]
			}
			RunSeg();
 8000e8e:	f7ff fb77 	bl	8000580 <RunSeg>
			break;
 8000e92:	e0ab      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case INIT_2:
			setTimer(0,0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f9e8 	bl	800126c <setTimer>
			setTimer(1, 50);
 8000e9c:	2132      	movs	r1, #50	; 0x32
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f000 f9e4 	bl	800126c <setTimer>
			status = RED_2;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin | YEL_LED1_Pin | GREEN_LED2_Pin | YEL_LED2_Pin, 1);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	f44f 61d8 	mov.w	r1, #1728	; 0x6c0
 8000eb0:	481c      	ldr	r0, [pc, #112]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000eb2:	f000 fde0 	bl	8001a76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000ebc:	4819      	ldr	r0, [pc, #100]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000ebe:	f000 fdda 	bl	8001a76 <HAL_GPIO_WritePin>
			break;
 8000ec2:	e093      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case RED_2:
			if(timer_flag[1]){
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <fsm_automatic_run+0x2fc>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00c      	beq.n	8000ee6 <fsm_automatic_run+0x2b6>
				HAL_GPIO_TogglePin(RED_LED1_GPIO_Port, RED_LED1_Pin);
 8000ecc:	2120      	movs	r1, #32
 8000ece:	4815      	ldr	r0, [pc, #84]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000ed0:	f000 fde9 	bl	8001aa6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(RED_LED2_GPIO_Port, RED_LED2_Pin);
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4812      	ldr	r0, [pc, #72]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000eda:	f000 fde4 	bl	8001aa6 <HAL_GPIO_TogglePin>
				setTimer(1, 50);
 8000ede:	2132      	movs	r1, #50	; 0x32
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 f9c3 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f7ff fd44 	bl	8000974 <isButtonPressed>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d012      	beq.n	8000f18 <fsm_automatic_run+0x2e8>
				status = YEL_2;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <fsm_automatic_run+0x2f0>)
 8000ef4:	220d      	movs	r2, #13
 8000ef6:	601a      	str	r2, [r3, #0]
				setTimer(1, 50);
 8000ef8:	2132      	movs	r1, #50	; 0x32
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 f9b6 	bl	800126c <setTimer>
				HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin | RED_LED2_Pin, 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000f06:	4807      	ldr	r0, [pc, #28]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000f08:	f000 fdb5 	bl	8001a76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, YEL_LED1_Pin | YEL_LED2_Pin, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f12:	4804      	ldr	r0, [pc, #16]	; (8000f24 <fsm_automatic_run+0x2f4>)
 8000f14:	f000 fdaf 	bl	8001a76 <HAL_GPIO_WritePin>
			}
			RunSegMode2();
 8000f18:	f7ff fbb8 	bl	800068c <RunSegMode2>
			break;
 8000f1c:	e066      	b.n	8000fec <fsm_automatic_run+0x3bc>
 8000f1e:	bf00      	nop
 8000f20:	20000070 	.word	0x20000070
 8000f24:	40010800 	.word	0x40010800
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	20000144 	.word	0x20000144
 8000f30:	20000014 	.word	0x20000014
		case YEL_2:
			if(timer_flag[1]){
 8000f34:	4b2e      	ldr	r3, [pc, #184]	; (8000ff0 <fsm_automatic_run+0x3c0>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00c      	beq.n	8000f56 <fsm_automatic_run+0x326>
				HAL_GPIO_TogglePin(YEL_LED1_GPIO_Port, YEL_LED1_Pin);
 8000f3c:	2140      	movs	r1, #64	; 0x40
 8000f3e:	482d      	ldr	r0, [pc, #180]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000f40:	f000 fdb1 	bl	8001aa6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(YEL_LED2_GPIO_Port, YEL_LED2_Pin);
 8000f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f48:	482a      	ldr	r0, [pc, #168]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000f4a:	f000 fdac 	bl	8001aa6 <HAL_GPIO_TogglePin>
				setTimer(1, 50);
 8000f4e:	2132      	movs	r1, #50	; 0x32
 8000f50:	2001      	movs	r0, #1
 8000f52:	f000 f98b 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fd0c 	bl	8000974 <isButtonPressed>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d012      	beq.n	8000f88 <fsm_automatic_run+0x358>
				status = GREEN_2;
 8000f62:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <fsm_automatic_run+0x3c8>)
 8000f64:	220e      	movs	r2, #14
 8000f66:	601a      	str	r2, [r3, #0]
				setTimer(1, 50);
 8000f68:	2132      	movs	r1, #50	; 0x32
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 f97e 	bl	800126c <setTimer>
				HAL_GPIO_WritePin(GPIOA, YEL_LED1_Pin | YEL_LED2_Pin, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f76:	481f      	ldr	r0, [pc, #124]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000f78:	f000 fd7d 	bl	8001a76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GREEN_LED1_Pin | GREEN_LED2_Pin, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000f84:	f000 fd77 	bl	8001a76 <HAL_GPIO_WritePin>
			}
			RunSegMode3();
 8000f88:	f7ff fbe6 	bl	8000758 <RunSegMode3>
			break;
 8000f8c:	e02e      	b.n	8000fec <fsm_automatic_run+0x3bc>
		case GREEN_2:
			if(timer_flag[1]){
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <fsm_automatic_run+0x3c0>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00c      	beq.n	8000fb0 <fsm_automatic_run+0x380>
				HAL_GPIO_TogglePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin);
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000f9a:	f000 fd84 	bl	8001aa6 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin);
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000fa4:	f000 fd7f 	bl	8001aa6 <HAL_GPIO_TogglePin>
				setTimer(1, 50);
 8000fa8:	2132      	movs	r1, #50	; 0x32
 8000faa:	2001      	movs	r0, #1
 8000fac:	f000 f95e 	bl	800126c <setTimer>
			}
			if(isButtonPressed(0)){
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fcdf 	bl	8000974 <isButtonPressed>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d011      	beq.n	8000fe0 <fsm_automatic_run+0x3b0>
				status = INIT;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <fsm_automatic_run+0x3c8>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
				setTimer(1, 50);
 8000fc2:	2132      	movs	r1, #50	; 0x32
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 f951 	bl	800126c <setTimer>
				HAL_GPIO_WritePin(GREEN_LED1_GPIO_Port, GREEN_LED1_Pin, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000fd0:	f000 fd51 	bl	8001a76 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_LED2_GPIO_Port, GREEN_LED2_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <fsm_automatic_run+0x3c4>)
 8000fdc:	f000 fd4b 	bl	8001a76 <HAL_GPIO_WritePin>
			}
			RunSegMode4();
 8000fe0:	f7ff fc20 	bl	8000824 <RunSegMode4>
			checkTime();
 8000fe4:	f7ff fdd2 	bl	8000b8c <checkTime>
			break;
 8000fe8:	e000      	b.n	8000fec <fsm_automatic_run+0x3bc>
		default:
			break;
 8000fea:	bf00      	nop
	}
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000144 	.word	0x20000144
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	20000070 	.word	0x20000070

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fa38 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f826 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 f8ac 	bl	8001164 <MX_GPIO_Init>
  MX_TIM2_Init();
 800100c:	f000 f85e 	bl	80010cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001010:	480e      	ldr	r0, [pc, #56]	; (800104c <main+0x50>)
 8001012:	f001 f98d 	bl	8002330 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initState();
 8001016:	f7ff fd9d 	bl	8000b54 <initState>
  setButton(0);
 800101a:	2000      	movs	r0, #0
 800101c:	f7ff fc68 	bl	80008f0 <setButton>
  setButton(1);
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fc65 	bl	80008f0 <setButton>
  setButton(2);
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff fc62 	bl	80008f0 <setButton>
  status = INIT;
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <main+0x54>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

  setTimer(2, 10); // for 7SEG
 8001032:	210a      	movs	r1, #10
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f919 	bl	800126c <setTimer>
  setTimer(3, 510);
 800103a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f914 	bl	800126c <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	fsm_automatic_run();
 8001044:	f7ff fdf4 	bl	8000c30 <fsm_automatic_run>
 8001048:	e7fc      	b.n	8001044 <main+0x48>
 800104a:	bf00      	nop
 800104c:	200000d4 	.word	0x200000d4
 8001050:	20000070 	.word	0x20000070

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b090      	sub	sp, #64	; 0x40
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	2228      	movs	r2, #40	; 0x28
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fd14 	bl	8002a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107a:	2301      	movs	r3, #1
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107e:	2310      	movs	r3, #16
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001082:	2300      	movs	r3, #0
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fd24 	bl	8001ad8 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001096:	f000 f8e3 	bl	8001260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 ff90 	bl	8001fd8 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010be:	f000 f8cf 	bl	8001260 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3740      	adds	r7, #64	; 0x40
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	463b      	mov	r3, r7
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <MX_TIM2_Init+0x94>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <MX_TIM2_Init+0x94>)
 80010f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80010f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MX_TIM2_Init+0x94>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <MX_TIM2_Init+0x94>)
 8001100:	2209      	movs	r2, #9
 8001102:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MX_TIM2_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <MX_TIM2_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001110:	4813      	ldr	r0, [pc, #76]	; (8001160 <MX_TIM2_Init+0x94>)
 8001112:	f001 f8bd 	bl	8002290 <HAL_TIM_Base_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800111c:	f000 f8a0 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	4619      	mov	r1, r3
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_TIM2_Init+0x94>)
 800112e:	f001 fa3b 	bl	80025a8 <HAL_TIM_ConfigClockSource>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001138:	f000 f892 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <MX_TIM2_Init+0x94>)
 800114a:	f001 fc13 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001154:	f000 f884 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200000d4 	.word	0x200000d4

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001178:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <MX_GPIO_Init+0xd4>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <MX_GPIO_Init+0xd4>)
 800117e:	f043 0310 	orr.w	r3, r3, #16
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <MX_GPIO_Init+0xd4>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_GPIO_Init+0xd4>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a28      	ldr	r2, [pc, #160]	; (8001238 <MX_GPIO_Init+0xd4>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0xd4>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <MX_GPIO_Init+0xd4>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <MX_GPIO_Init+0xd4>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <MX_GPIO_Init+0xd4>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 80011c0:	2200      	movs	r2, #0
 80011c2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80011c6:	481d      	ldr	r0, [pc, #116]	; (800123c <MX_GPIO_Init+0xd8>)
 80011c8:	f000 fc55 	bl	8001a76 <HAL_GPIO_WritePin>
                          |RED_LED1_Pin|YEL_LED1_Pin|GREEN_LED1_Pin|RED_LED2_Pin
                          |YEL_LED2_Pin|GREEN_LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d2_Pin
 80011cc:	2200      	movs	r2, #0
 80011ce:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80011d2:	481b      	ldr	r0, [pc, #108]	; (8001240 <MX_GPIO_Init+0xdc>)
 80011d4:	f000 fc4f 	bl	8001a76 <HAL_GPIO_WritePin>
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80011d8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	4815      	ldr	r0, [pc, #84]	; (8001244 <MX_GPIO_Init+0xe0>)
 80011ee:	f000 fab1 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin EN4_Pin
                           RED_LED1_Pin YEL_LED1_Pin GREEN_LED1_Pin RED_LED2_Pin
                           YEL_LED2_Pin GREEN_LED2_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin|EN4_Pin
 80011f2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80011f6:	613b      	str	r3, [r7, #16]
                          |RED_LED1_Pin|YEL_LED1_Pin|GREEN_LED1_Pin|RED_LED2_Pin
                          |YEL_LED2_Pin|GREEN_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_GPIO_Init+0xd8>)
 800120c:	f000 faa2 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d2_Pin
                           e2_Pin f2_Pin g2_Pin d_Pin
                           e_Pin f_Pin g_Pin a2_Pin
                           b2_Pin c2_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d2_Pin
 8001210:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001214:	613b      	str	r3, [r7, #16]
                          |e2_Pin|f2_Pin|g2_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin|a2_Pin
                          |b2_Pin|c2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001216:	2301      	movs	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2302      	movs	r3, #2
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_GPIO_Init+0xdc>)
 800122a:	f000 fa93 	bl	8001754 <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3720      	adds	r7, #32
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800
 8001240:	40010c00 	.word	0x40010c00
 8001244:	40011000 	.word	0x40011000

08001248 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	getKeyInput();
 8001250:	f7ff fbe4 	bl	8000a1c <getKeyInput>
	timerRun();
 8001254:	f000 f82a 	bl	80012ac <timerRun>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <setTimer>:
#define CYCLE 10

int timer_counter[MAX_COUNTER];
int timer_flag[MAX_COUNTER];

void setTimer(int index, int duration){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/CYCLE;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <setTimer+0x34>)
 800127a:	fb82 1203 	smull	r1, r2, r2, r3
 800127e:	1092      	asrs	r2, r2, #2
 8001280:	17db      	asrs	r3, r3, #31
 8001282:	1ad2      	subs	r2, r2, r3
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <setTimer+0x38>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 800128c:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <setTimer+0x3c>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2100      	movs	r1, #0
 8001292:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	66666667 	.word	0x66666667
 80012a4:	2000011c 	.word	0x2000011c
 80012a8:	20000144 	.word	0x20000144

080012ac <timerRun>:
		return 1;
	}
	return 0;
}

void timerRun(){
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_COUNTER; i++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	e01c      	b.n	80012f2 <timerRun+0x46>
		if(timer_counter[i] > 0) {
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <timerRun+0x58>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd13      	ble.n	80012ec <timerRun+0x40>
			timer_counter[i]--;
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <timerRun+0x58>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	490d      	ldr	r1, [pc, #52]	; (8001304 <timerRun+0x58>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0){
 80012d6:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <timerRun+0x58>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dc04      	bgt.n	80012ec <timerRun+0x40>
				timer_flag[i] = 1;
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <timerRun+0x5c>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2101      	movs	r1, #1
 80012e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < MAX_COUNTER; i++){
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3301      	adds	r3, #1
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	dddf      	ble.n	80012b8 <timerRun+0xc>
			}
		}
	}
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	2000011c 	.word	0x2000011c
 8001308:	20000144 	.word	0x20000144

0800130c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <HAL_MspInit+0x5c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	4a14      	ldr	r2, [pc, #80]	; (8001368 <HAL_MspInit+0x5c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6193      	str	r3, [r2, #24]
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_MspInit+0x5c>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x5c>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x5c>)
 8001330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x5c>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_MspInit+0x60>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	4a04      	ldr	r2, [pc, #16]	; (800136c <HAL_MspInit+0x60>)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40010000 	.word	0x40010000

08001370 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001380:	d113      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	61d3      	str	r3, [r2, #28]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_TIM_Base_MspInit+0x44>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201c      	movs	r0, #28
 80013a0:	f000 f9a1 	bl	80016e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013a4:	201c      	movs	r0, #28
 80013a6:	f000 f9ba 	bl	800171e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40021000 	.word	0x40021000

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <NMI_Handler+0x4>

080013be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <HardFault_Handler+0x4>

080013c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <MemManage_Handler+0x4>

080013ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <BusFault_Handler+0x4>

080013d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <UsageFault_Handler+0x4>

080013d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fe:	f000 f87f 	bl	8001500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM2_IRQHandler+0x10>)
 800140e:	f000 ffdb 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200000d4 	.word	0x200000d4

0800141c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001428:	f7ff fff8 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800142e:	490c      	ldr	r1, [pc, #48]	; (8001460 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a09      	ldr	r2, [pc, #36]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001444:	4c09      	ldr	r4, [pc, #36]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001452:	f001 faf9 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001456:	f7ff fdd1 	bl	8000ffc <main>
  bx lr
 800145a:	4770      	bx	lr
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001464:	08002ae4 	.word	0x08002ae4
  ldr r2, =_sbss
 8001468:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800146c:	20000170 	.word	0x20000170

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>
	...

08001474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x28>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x28>)
 800147e:	f043 0310 	orr.w	r3, r3, #16
 8001482:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f923 	bl	80016d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	200f      	movs	r0, #15
 800148c:	f000 f808 	bl	80014a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff ff3c 	bl	800130c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40022000 	.word	0x40022000

080014a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x54>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x58>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f93b 	bl	800173a <HAL_SYSTICK_Config>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e00e      	b.n	80014ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b0f      	cmp	r3, #15
 80014d2:	d80a      	bhi.n	80014ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d4:	2200      	movs	r2, #0
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	f04f 30ff 	mov.w	r0, #4294967295
 80014dc:	f000 f903 	bl	80016e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_InitTick+0x5c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e000      	b.n	80014ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000048 	.word	0x20000048
 80014f8:	20000050 	.word	0x20000050
 80014fc:	2000004c 	.word	0x2000004c

08001500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_IncTick+0x1c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x20>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <HAL_IncTick+0x20>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	20000050 	.word	0x20000050
 8001520:	2000016c 	.word	0x2000016c

08001524 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b02      	ldr	r3, [pc, #8]	; (8001534 <HAL_GetTick+0x10>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	2000016c 	.word	0x2000016c

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4906      	ldr	r1, [pc, #24]	; (80015d0 <__NVIC_EnableIRQ+0x34>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800169c:	d301      	bcc.n	80016a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169e:	2301      	movs	r3, #1
 80016a0:	e00f      	b.n	80016c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <SysTick_Config+0x40>)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016aa:	210f      	movs	r1, #15
 80016ac:	f04f 30ff 	mov.w	r0, #4294967295
 80016b0:	f7ff ff90 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <SysTick_Config+0x40>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ba:	4b04      	ldr	r3, [pc, #16]	; (80016cc <SysTick_Config+0x40>)
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	e000e010 	.word	0xe000e010

080016d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff ff2d 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	4603      	mov	r3, r0
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f8:	f7ff ff42 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	6978      	ldr	r0, [r7, #20]
 8001704:	f7ff ff90 	bl	8001628 <NVIC_EncodePriority>
 8001708:	4602      	mov	r2, r0
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff5f 	bl	80015d4 <__NVIC_SetPriority>
}
 8001716:	bf00      	nop
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff35 	bl	800159c <__NVIC_EnableIRQ>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffa2 	bl	800168c <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b08b      	sub	sp, #44	; 0x2c
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001766:	e148      	b.n	80019fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001768:	2201      	movs	r2, #1
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	429a      	cmp	r2, r3
 8001782:	f040 8137 	bne.w	80019f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	4aa3      	ldr	r2, [pc, #652]	; (8001a18 <HAL_GPIO_Init+0x2c4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d05e      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 8001790:	4aa1      	ldr	r2, [pc, #644]	; (8001a18 <HAL_GPIO_Init+0x2c4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d875      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 8001796:	4aa1      	ldr	r2, [pc, #644]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d058      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 800179c:	4a9f      	ldr	r2, [pc, #636]	; (8001a1c <HAL_GPIO_Init+0x2c8>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d86f      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017a2:	4a9f      	ldr	r2, [pc, #636]	; (8001a20 <HAL_GPIO_Init+0x2cc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d052      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017a8:	4a9d      	ldr	r2, [pc, #628]	; (8001a20 <HAL_GPIO_Init+0x2cc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d869      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ae:	4a9d      	ldr	r2, [pc, #628]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d04c      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017b4:	4a9b      	ldr	r2, [pc, #620]	; (8001a24 <HAL_GPIO_Init+0x2d0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d863      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ba:	4a9b      	ldr	r2, [pc, #620]	; (8001a28 <HAL_GPIO_Init+0x2d4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d046      	beq.n	800184e <HAL_GPIO_Init+0xfa>
 80017c0:	4a99      	ldr	r2, [pc, #612]	; (8001a28 <HAL_GPIO_Init+0x2d4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d85d      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d82a      	bhi.n	8001820 <HAL_GPIO_Init+0xcc>
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d859      	bhi.n	8001882 <HAL_GPIO_Init+0x12e>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <HAL_GPIO_Init+0x80>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	0800184f 	.word	0x0800184f
 80017d8:	08001829 	.word	0x08001829
 80017dc:	0800183b 	.word	0x0800183b
 80017e0:	0800187d 	.word	0x0800187d
 80017e4:	08001883 	.word	0x08001883
 80017e8:	08001883 	.word	0x08001883
 80017ec:	08001883 	.word	0x08001883
 80017f0:	08001883 	.word	0x08001883
 80017f4:	08001883 	.word	0x08001883
 80017f8:	08001883 	.word	0x08001883
 80017fc:	08001883 	.word	0x08001883
 8001800:	08001883 	.word	0x08001883
 8001804:	08001883 	.word	0x08001883
 8001808:	08001883 	.word	0x08001883
 800180c:	08001883 	.word	0x08001883
 8001810:	08001883 	.word	0x08001883
 8001814:	08001883 	.word	0x08001883
 8001818:	08001831 	.word	0x08001831
 800181c:	08001845 	.word	0x08001845
 8001820:	4a82      	ldr	r2, [pc, #520]	; (8001a2c <HAL_GPIO_Init+0x2d8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001826:	e02c      	b.n	8001882 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e029      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	3304      	adds	r3, #4
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e024      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	3308      	adds	r3, #8
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e01f      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	330c      	adds	r3, #12
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e01a      	b.n	8001884 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001856:	2304      	movs	r3, #4
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e013      	b.n	8001884 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001864:	2308      	movs	r3, #8
 8001866:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	611a      	str	r2, [r3, #16]
          break;
 800186e:	e009      	b.n	8001884 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001870:	2308      	movs	r3, #8
 8001872:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69fa      	ldr	r2, [r7, #28]
 8001878:	615a      	str	r2, [r3, #20]
          break;
 800187a:	e003      	b.n	8001884 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
          break;
 8001880:	e000      	b.n	8001884 <HAL_GPIO_Init+0x130>
          break;
 8001882:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d801      	bhi.n	800188e <HAL_GPIO_Init+0x13a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	e001      	b.n	8001892 <HAL_GPIO_Init+0x13e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3304      	adds	r3, #4
 8001892:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	; 0xff
 8001898:	d802      	bhi.n	80018a0 <HAL_GPIO_Init+0x14c>
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x152>
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	3b08      	subs	r3, #8
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	210f      	movs	r1, #15
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	401a      	ands	r2, r3
 80018b8:	6a39      	ldr	r1, [r7, #32]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8090 	beq.w	80019f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <HAL_GPIO_Init+0x2dc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a55      	ldr	r2, [pc, #340]	; (8001a30 <HAL_GPIO_Init+0x2dc>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_GPIO_Init+0x2dc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018ec:	4a51      	ldr	r2, [pc, #324]	; (8001a34 <HAL_GPIO_Init+0x2e0>)
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a49      	ldr	r2, [pc, #292]	; (8001a38 <HAL_GPIO_Init+0x2e4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00d      	beq.n	8001934 <HAL_GPIO_Init+0x1e0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a48      	ldr	r2, [pc, #288]	; (8001a3c <HAL_GPIO_Init+0x2e8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d007      	beq.n	8001930 <HAL_GPIO_Init+0x1dc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <HAL_GPIO_Init+0x2ec>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d101      	bne.n	800192c <HAL_GPIO_Init+0x1d8>
 8001928:	2302      	movs	r3, #2
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 800192c:	2303      	movs	r3, #3
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x1e2>
 8001934:	2300      	movs	r3, #0
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001946:	493b      	ldr	r1, [pc, #236]	; (8001a34 <HAL_GPIO_Init+0x2e0>)
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	43db      	mvns	r3, r3
 8001976:	4933      	ldr	r1, [pc, #204]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001978:	4013      	ands	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	492d      	ldr	r1, [pc, #180]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	60cb      	str	r3, [r1, #12]
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	43db      	mvns	r3, r3
 800199e:	4929      	ldr	r1, [pc, #164]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	4923      	ldr	r1, [pc, #140]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]
 80019bc:	e006      	b.n	80019cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	43db      	mvns	r3, r3
 80019c6:	491f      	ldr	r1, [pc, #124]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4919      	ldr	r1, [pc, #100]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e006      	b.n	80019f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4915      	ldr	r1, [pc, #84]	; (8001a44 <HAL_GPIO_Init+0x2f0>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3301      	adds	r3, #1
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f47f aeaf 	bne.w	8001768 <HAL_GPIO_Init+0x14>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	372c      	adds	r7, #44	; 0x2c
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	10320000 	.word	0x10320000
 8001a1c:	10310000 	.word	0x10310000
 8001a20:	10220000 	.word	0x10220000
 8001a24:	10210000 	.word	0x10210000
 8001a28:	10120000 	.word	0x10120000
 8001a2c:	10110000 	.word	0x10110000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40010800 	.word	0x40010800
 8001a3c:	40010c00 	.word	0x40010c00
 8001a40:	40011000 	.word	0x40011000
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a60:	2301      	movs	r3, #1
 8001a62:	73fb      	strb	r3, [r7, #15]
 8001a64:	e001      	b.n	8001a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3714      	adds	r7, #20
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	807b      	strh	r3, [r7, #2]
 8001a82:	4613      	mov	r3, r2
 8001a84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a86:	787b      	ldrb	r3, [r7, #1]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8c:	887a      	ldrh	r2, [r7, #2]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a92:	e003      	b.n	8001a9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	041a      	lsls	r2, r3, #16
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4013      	ands	r3, r2
 8001abe:	041a      	lsls	r2, r3, #16
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43d9      	mvns	r1, r3
 8001ac4:	887b      	ldrh	r3, [r7, #2]
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	611a      	str	r2, [r3, #16]
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e26c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8087 	beq.w	8001c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b04:	4b8f      	ldr	r3, [pc, #572]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
 8001b10:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x12c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d168      	bne.n	8001c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e246      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x76>
 8001b40:	4b80      	ldr	r3, [pc, #512]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7f      	ldr	r2, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b78      	ldr	r3, [pc, #480]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xbc>
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a71      	ldr	r2, [pc, #452]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b94:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fcb6 	bl	8001524 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fcb2 	bl	8001524 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1fa      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe4>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fca2 	bl	8001524 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fc9e 	bl	8001524 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1e6      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x10c>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1e:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1ba      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4939      	ldr	r1, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff fc57 	bl	8001524 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fc53 	bl	8001524 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e19b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fc36 	bl	8001524 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fc32 	bl	8001524 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e17a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03a      	beq.n	8001d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d019      	beq.n	8001d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff fc16 	bl	8001524 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fc12 	bl	8001524 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e15a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 fa9a 	bl	8002254 <RCC_Delay>
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff fbfc 	bl	8001524 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	e00f      	b.n	8001d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff fbf8 	bl	8001524 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d908      	bls.n	8001d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e140      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	42420000 	.word	0x42420000
 8001d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b9e      	ldr	r3, [pc, #632]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e9      	bne.n	8001d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a6 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a93      	ldr	r2, [pc, #588]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a8a      	ldr	r2, [pc, #552]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7ff fbb9 	bl	8001524 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7ff fbb5 	bl	8001524 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	; 0x64
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0fd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	e01c      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d10c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x356>
 8001e14:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a6c      	ldr	r2, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e00b      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a63      	ldr	r2, [pc, #396]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d015      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff fb69 	bl	8001524 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff fb65 	bl	8001524 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0ab      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCC_OscConfig+0x37e>
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb53 	bl	8001524 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fb4f 	bl	8001524 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e095      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8081 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec0:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d061      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d146      	bne.n	8001f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_OscConfig+0x4fc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fb23 	bl	8001524 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff fb1f 	bl	8001524 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e067      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d108      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	492d      	ldr	r1, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a19      	ldr	r1, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	4927      	ldr	r1, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x4fc>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff faf3 	bl	8001524 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff faef 	bl	8001524 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e037      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46a>
 8001f60:	e02f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x4fc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fadc 	bl	8001524 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff fad8 	bl	8001524 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e020      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x498>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e013      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42420060 	.word	0x42420060

08001fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4965      	ldr	r1, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7ff fa2c 	bl	8001524 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7ff fa28 	bl	8001524 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	490a      	ldr	r1, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	5ccb      	ldrb	r3, [r1, r3]
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff f98a 	bl	80014a0 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	08002ab8 	.word	0x08002ab8
 80021a4:	20000048 	.word	0x20000048
 80021a8:	2000004c 	.word	0x2000004c

080021ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021c6:	4b1e      	ldr	r3, [pc, #120]	; (8002240 <HAL_RCC_GetSysClockFreq+0x94>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f003 030c 	and.w	r3, r3, #12
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x30>
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x36>
 80021da:	e027      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_RCC_GetSysClockFreq+0x98>)
 80021de:	613b      	str	r3, [r7, #16]
      break;
 80021e0:	e027      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0c9b      	lsrs	r3, r3, #18
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	4a17      	ldr	r2, [pc, #92]	; (8002248 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021ec:	5cd3      	ldrb	r3, [r2, r3]
 80021ee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_RCC_GetSysClockFreq+0x94>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	0c5b      	lsrs	r3, r3, #17
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	4a11      	ldr	r2, [pc, #68]	; (800224c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002206:	5cd3      	ldrb	r3, [r2, r3]
 8002208:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	fb02 f203 	mul.w	r2, r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e004      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	613b      	str	r3, [r7, #16]
      break;
 800222a:	e002      	b.n	8002232 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_GetSysClockFreq+0x98>)
 800222e:	613b      	str	r3, [r7, #16]
      break;
 8002230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002232:	693b      	ldr	r3, [r7, #16]
}
 8002234:	4618      	mov	r0, r3
 8002236:	371c      	adds	r7, #28
 8002238:	46bd      	mov	sp, r7
 800223a:	bc80      	pop	{r7}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	007a1200 	.word	0x007a1200
 8002248:	08002ac8 	.word	0x08002ac8
 800224c:	08002ad8 	.word	0x08002ad8
 8002250:	003d0900 	.word	0x003d0900

08002254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <RCC_Delay+0x34>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <RCC_Delay+0x38>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	fb02 f303 	mul.w	r3, r2, r3
 800226e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002270:	bf00      	nop
  }
  while (Delay --);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f9      	bne.n	8002270 <RCC_Delay+0x1c>
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000048 	.word	0x20000048
 800228c:	10624dd3 	.word	0x10624dd3

08002290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e041      	b.n	8002326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff f85a 	bl	8001370 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 fa56 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e035      	b.n	80023b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x4e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002372:	d004      	beq.n	800237e <HAL_TIM_Base_Start_IT+0x4e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_TIM_Base_Start_IT+0x94>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d111      	bne.n	80023a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d010      	beq.n	80023b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a0:	e007      	b.n	80023b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40000400 	.word	0x40000400

080023c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d020      	beq.n	800242c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01b      	beq.n	800242c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0202 	mvn.w	r2, #2
 80023fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f998 	bl	8002748 <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f98b 	bl	8002736 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f99a 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d020      	beq.n	8002478 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0204 	mvn.w	r2, #4
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f972 	bl	8002748 <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f965 	bl	8002736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f974 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d020      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0208 	mvn.w	r2, #8
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2204      	movs	r2, #4
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f94c 	bl	8002748 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f93f 	bl	8002736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f94e 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d020      	beq.n	8002510 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f926 	bl	8002748 <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f919 	bl	8002736 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f928 	bl	800275a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0201 	mvn.w	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7fe fe8a 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa6f 	bl	8002a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00c      	beq.n	800257c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f8f8 	bl	800276c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00c      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0320 	and.w	r3, r3, #32
 800258c:	2b00      	cmp	r3, #0
 800258e:	d007      	beq.n	80025a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0220 	mvn.w	r2, #32
 8002598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa42 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_ConfigClockSource+0x1c>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0b4      	b.n	800272e <HAL_TIM_ConfigClockSource+0x186>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d03e      	beq.n	800267c <HAL_TIM_ConfigClockSource+0xd4>
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	f200 8087 	bhi.w	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	f000 8086 	beq.w	800271a <HAL_TIM_ConfigClockSource+0x172>
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	d87f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002614:	2b70      	cmp	r3, #112	; 0x70
 8002616:	d01a      	beq.n	800264e <HAL_TIM_ConfigClockSource+0xa6>
 8002618:	2b70      	cmp	r3, #112	; 0x70
 800261a:	d87b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 800261c:	2b60      	cmp	r3, #96	; 0x60
 800261e:	d050      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002620:	2b60      	cmp	r3, #96	; 0x60
 8002622:	d877      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002624:	2b50      	cmp	r3, #80	; 0x50
 8002626:	d03c      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002628:	2b50      	cmp	r3, #80	; 0x50
 800262a:	d873      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d058      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d86f      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	d064      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 8002638:	2b30      	cmp	r3, #48	; 0x30
 800263a:	d86b      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 800263c:	2b20      	cmp	r3, #32
 800263e:	d060      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 8002640:	2b20      	cmp	r3, #32
 8002642:	d867      	bhi.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05c      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 8002648:	2b10      	cmp	r3, #16
 800264a:	d05a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0x15a>
 800264c:	e062      	b.n	8002714 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 f96a 	bl	8002936 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	609a      	str	r2, [r3, #8]
      break;
 800267a:	e04f      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	6899      	ldr	r1, [r3, #8]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f000 f953 	bl	8002936 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269e:	609a      	str	r2, [r3, #8]
      break;
 80026a0:	e03c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	6859      	ldr	r1, [r3, #4]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f000 f8ca 	bl	8002848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2150      	movs	r1, #80	; 0x50
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f921 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 80026c0:	e02c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f000 f8e8 	bl	80028a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2160      	movs	r1, #96	; 0x60
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f911 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 80026e0:	e01c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	461a      	mov	r2, r3
 80026f0:	f000 f8aa 	bl	8002848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f901 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 8002700:	e00c      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4619      	mov	r1, r3
 800270c:	4610      	mov	r0, r2
 800270e:	f000 f8f8 	bl	8002902 <TIM_ITRx_SetConfig>
      break;
 8002712:	e003      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
      break;
 8002718:	e000      	b.n	800271c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800271a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
	...

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a2b      	ldr	r2, [pc, #172]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d007      	beq.n	80027a8 <TIM_Base_SetConfig+0x28>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d003      	beq.n	80027a8 <TIM_Base_SetConfig+0x28>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a28      	ldr	r2, [pc, #160]	; (8002844 <TIM_Base_SetConfig+0xc4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <TIM_Base_SetConfig+0x52>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d003      	beq.n	80027d2 <TIM_Base_SetConfig+0x52>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <TIM_Base_SetConfig+0xc4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d108      	bne.n	80027e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <TIM_Base_SetConfig+0xc0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d103      	bne.n	8002818 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f023 0201 	bic.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]
  }
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400

08002848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f023 030a 	bic.w	r3, r3, #10
 8002884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	621a      	str	r2, [r3, #32]
}
 800289a:	bf00      	nop
 800289c:	371c      	adds	r7, #28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0210 	bic.w	r2, r3, #16
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	031b      	lsls	r3, r3, #12
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr

08002902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4313      	orrs	r3, r2
 8002920:	f043 0307 	orr.w	r3, r3, #7
 8002924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002936:	b480      	push	{r7}
 8002938:	b087      	sub	sp, #28
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002950:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	021a      	lsls	r2, r3, #8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	431a      	orrs	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4313      	orrs	r3, r2
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	609a      	str	r2, [r3, #8]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002988:	2302      	movs	r3, #2
 800298a:	e041      	b.n	8002a10 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a14      	ldr	r2, [pc, #80]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d004      	beq.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10c      	bne.n	80029fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40012c00 	.word	0x40012c00
 8002a20:	40000400 	.word	0x40000400

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	4d0c      	ldr	r5, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	f000 f822 	bl	8002aa0 <_init>
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	4d0a      	ldr	r5, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	08002adc 	.word	0x08002adc
 8002a84:	08002adc 	.word	0x08002adc
 8002a88:	08002adc 	.word	0x08002adc
 8002a8c:	08002ae0 	.word	0x08002ae0

08002a90 <memset>:
 8002a90:	4603      	mov	r3, r0
 8002a92:	4402      	add	r2, r0
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d100      	bne.n	8002a9a <memset+0xa>
 8002a98:	4770      	bx	lr
 8002a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a9e:	e7f9      	b.n	8002a94 <memset+0x4>

08002aa0 <_init>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr

08002aac <_fini>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr
